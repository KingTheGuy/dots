; TODO: define the style of the sinks here
; pull the style from eww to the program
; and apply the sinks and then return devices

(deflisten loaded_sinks
  "go/sink/main SINKS"
)

(defvar sinks_style_container
  `(box :width 120 :orientation 'v' :halign "center" :valign "center" :space-evenly false :spacing 2 %s)`
)

(defvar sinks_style
  `(eventbox :cursor "pointer" :onclick "wpctl set-default %v && go/audio/main sink" :class "audio_sinks" (box :style "padding:6px;" "%s"))`
)

(deflisten usb_devices
  "watch lsusb"
)

(defwidget progress_bar [?width ?height ?scroll ?click ?value ?text ?orientation ?hover]
  (box
    :halign "center"
    :valign "end"
    :space-evenly false
    ; :style "background-color:white;"
    :height {height == ""? 100 : height }
    ; :style "background:linear-gradient(0deg, #111111 ${value}%, #c8c8c8 ${value / 100}%);"
    ; :style "background:linear-gradient(0deg, #0c0d0e ${value}%, #c8c8c8 ${value / 100}%);"
    :class "progress_bar"
  (eventbox
    ; :onclick "go/audio/volume_level mute"
    ; :onscroll "go/audio/volume_level {}"
    :onhover {hover}
    :onscroll {scroll}
    :onclick {click}

    (overlay
      ; (progress
      ;   :halign "center"
      ;   :valign "center"
      ;   :width 12
      ;   :flipped true
      ;   :orientation "v"
      ;   ; :value {height == ""? value :round((value / 100) * height,0)}
      ;   :value 0.4
      ;   :style "background-color:blue;color:white;min-height:10px;"
      ; )
      (box
        :width {width}
      )
      (eventbox
        :class "progress_bar_progress"
        (box
          :halign "center"
          :valign "end"
          ; :height {height == ""? value :round((value / 100) * height,0)}
          :height {height == ""? "${value <= 30? 30 : value }" : "${value <= 30? round((30 / 100) * height,0) : round((value / 100) * height,0) }" }
          :width {width}
          :style "opacity:${value/70}"
        )
      )
      (box
        :width {width}
        :halign "center"
        :valign "end"
        :style "margin-bottom:12px;"
        ; :style "margin-bottom:0.5rem;"
        ; :style "margin-bottom:${round((value / 100) * height,0)-20}px;"
        ; :style "margin-bottom:${height == ""? "${value <= 30? 30 : value }" : "${value <= 30? round((30 / 100) * height,0) : round((value / 100) * height,0) }" }px;"
        :orientation "v"
        (label
          ; :style {!matches(volume_muted,"[MUTED]")?"":"text-decoration:line-through;"}
          :text {text}
          ; :text {replace(volume_level,"Volume level: ","") /100}
        )
      )
    )
  )
  )
)

(defwidget sinks_container[?percent]
    (eventbox
      ; :dragvalue "sinks_container"
      :dragvalue "mini_player"
      :dragtype "text"
    (box
      :orientation "v"
      :halign "center"
      :valign "center"
      :space-evenly false
      :spacing 6
      :class "base"
      (box
        :orientation "h"
        :halign "start"
        :valign "center"
        :space-evenly false
        :spacing 6
        ; :class "base"
        ; :vexapnd false
        ; :height 100
        (progress_bar 
          ; :height 120
          ; :vexpand true
          :hover "$PWD/bash/update_loaded.sh"
          :width 35
          ; :scroll {"go/audio/volume_level {} && paplay /usr/share/sounds/freedesktop/stereo/audio-volume-change.oga"}
          ; :click {"go/audio/volume_level mute && paplay /usr/share/sounds/freedesktop/stereo/audio-volume-change.oga"}
          :scroll {"go/audio/volume_level {}"}
          :click {"go/audio/volume_level mute && paplay /usr/share/sounds/freedesktop/stereo/audio-volume-change.oga"}
          :value "${replace(volume_level,"Volume level: ","") + 0.0 >= 100? "100":replace(volume_level,"Volume level: ","") + 0.0}"
          :text {replace(volume_level,"Volume level: ","") + 0.0}
        )
        (eventbox
          :onclick "$PWD/bash/update_loaded.sh"
          ; TODO: have the devices get order by id
          ; :onhoverlost "$PWD/bash/update_loaded.sh"
          (scroll
            :vscroll true
            :hscroll false
            :class "sinks_section"
            (box
              :space-evenly false
              :orientation "v"
              :spacing 2
              :valign "start"
              ; :style "padding:10px;"
              (literal
                :content {loaded_sinks}
              )
              ; (literal
              ;   :content {replace(sinks_style,"%s","*TEST_SINK*")}
              ; )
              ; (literal
              ;   :content {replace(sinks_style,"%s","*TEST_SINK*")}
              ; )
              ; (literal
              ;   :content {replace(sinks_style,"%s","*TEST_SINK*")}
              ; )
              ; (literal
              ;   :content {replace(sinks_style,"%s","*TEST_SINK*")}
              ; )
            )
          )
        )
      )
      (label :halign "center" :style "font-size:large;" :text {volume_muted == "[MUTED]"? "󰝟":"󰕾"})
      )
    )
    
)

(defwindow audio_control [pos]
  :namespace "canvas"
  :monitor 0
  :stacking "overlay"
  :windowtype "dock"
  :exclusive false
  :geometry (geometry 
             ; :x "60px"
              :x pos
             ; :x "2%"
             :y "5%"
             :anchor "left top"
            )
  (eventbox
    :onhoverlost "eww close audio_control"
      (box 
        :orientation "h"
        :halign "start"
        :valign "center"
        :space-evenly false
        ; :class "audio_control"
        ; :class "base"
        :class "canvas"
        :spacing 10
        ; (box
        ;   :orientation "h"
        ;   :height 100
        ;   :halign "start"
        ;   :valign "center"
        ;   :space-evenly false
        ;   :spacing 10
        ;   :class "base"
        ;   (progress_bar 
        ;     :width 35
        ;     :scroll 'lua lua/scroll_handler.lua {} "light -A 0.5" "light -U 0.5" "light -G" "brightness_value"'
        ;     :click {"light -G"}
        ;     :value "${round(brightness_value,0)}"
        ;     ; :value 10
        ;     :text "${round(brightness_value,0)}"
        ;   )
        ;   "backlight"
        ; )
        (mini_player)
        (sinks_container :percent "${replace(volume_level,"Volume level: ","") + 0.0 >= 100? "100":replace(volume_level,"Volume level: ","") + 0.0}")
      )
  )
)

